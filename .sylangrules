# ⚠️  AUTO-GENERATED FILE - DO NOT EDIT MANUALLY ⚠️
# This file is automatically generated by the Sylang VSCode Extension
# Any manual changes will be lost when the file is regenerated
# To update this file, use the command: "Sylang: Create Project Rules"
# Generated: 2025-09-09T22:37:14.816Z
# Extension Version: 2.23.28
#
# ═══════════════════════════════════════════════════════════════════════════════
#
# Sylang Project Rules and AI Development Guidelines
# This file provides comprehensive context for AI development of Sylang projects

project_name: "Sylang Model-Based Systems Engineering Project"
language: "Sylang"
version: "2.23.28"
domain: "Model-Based Systems Engineering, Digital Twin, Feature Modeling, ISO 26262 Functional Safety"

# CRITICAL: All 16 extensions are fully implemented and working
implemented_extensions:
  - .ple (Product Line Engineering) - COMPLETE
  - .fml (Feature Model) - COMPLETE  
  - .vml (Variant Model) - COMPLETE
  - .vcf (Variant Configuration) - COMPLETE
  - .blk (Block Definition) - COMPLETE - REDESIGNED v2.18.38
  - .fun (Function Definition) - COMPLETE
  - .req (Requirement Definition) - COMPLETE
  - .tst (Test Definition) - COMPLETE
  - .spr (Sprint Definition) - COMPLETE
  - .agt (Agent Definition) - COMPLETE
  - .ucd (Use Case Diagram) - COMPLETE
  - .seq (Sequence Diagram) - COMPLETE - REDESIGNED v2.18.38  
  - .flr (Failure Analysis for FMEA) - COMPLETE
  - .itm (Item Definition - ISO 26262) - COMPLETE
  - .haz (Hazard Analysis - ISO 26262) - COMPLETE
  - .sam (Safety Mechanisms - ISO 26262) - COMPLETE
  - .fta (Fault Tree Analysis) - COMPLETE v2.18.38

planned_extensions:
  - .phy (Physical Models) - PLANNED
  - .sim (Simulation Models) - PLANNED
  - .cal (Calibration) - PLANNED

# REAL SYLANG FILE STRUCTURE EXAMPLES

## .ple FILES (Product Line Engineering)
# Rule: ONE hdef productline, NO def statements, NO use statements
ple_example: |
  hdef productline AutonomousVehicleProductLine
    name "Autonomous Vehicle Platform Product Line"
    description "Comprehensive autonomous vehicle system covering ADAS, infotainment, powertrain, and safety systems"
    owner "Vehicle Systems Engineering Team"
    domain "autonomous-vehicles", "automotive-safety", "ADAS", "connected-mobility"
    compliance "ISO 26262", "ISO 21448", "UN ECE R79", "SAE J3016"
    firstrelease "2026-03-01"
    tags "autonomous-driving", "L3-automation", "safety-critical", "connected-vehicle"
    safetylevel ASIL-D
    region "Global", "North America", "Europe", "Asia-Pacific"

## .fml FILES (Feature Model)  
# Rule: ONE hdef featureset, MULTIPLE def feature (hierarchical), uses productline
# CRITICAL SIBLING RULES: Features at same indentation level must have consistent flags:
# - If one sibling is mandatory/optional, ALL siblings must be mandatory/optional
# - If one sibling is 'or', ALL siblings must be 'or' 
# - If one sibling is 'alternative', ALL siblings must be 'alternative'
fml_example: |
use productline AutonomousVehicleProductLine

hdef featureset AutonomousVehicleFeatures
  name "Autonomous Vehicle Feature Set"
  description "Comprehensive feature model for autonomous vehicle platform with L3 automation capabilities"
  owner "Product Engineering Team"
  tags "features", "autonomous-vehicle", "L3-automation", "ASIL-D"
  listedfor ref productline AutonomousVehicleProductLine

  def feature CoreAutonomousFeatures mandatory
    name "Core Autonomous Driving Features"
    description "Essential autonomous driving functionality for L3 automation"
    owner "Autonomous Systems Team"
    tags "core-function", "safety-critical", "L3-automation"
    safetylevel ASIL-D

    def feature PerceptionSystem mandatory
      name "Environmental Perception System"
      description "Multi-sensor fusion for environmental awareness"
      owner "Perception Team"
      tags "perception", "sensor-fusion", "environmental-awareness"
      safetylevel ASIL-D

      def feature CameraSystem mandatory
        name "Camera-based Vision System"
        description "Stereo and mono camera processing for object detection"
        owner "Vision Team"
        tags "camera", "computer-vision", "object-detection"
        safetylevel ASIL-D

      def feature LidarSystem optional
        name "LiDAR Scanning System"  
        description "3D point cloud processing for precise distance measurement"
        owner "LiDAR Team"
        tags "lidar", "3d-scanning", "distance-measurement"
        safetylevel ASIL-C

      def feature RadarSystem mandatory
        name "Radar Detection System"
        description "Long and short range radar for velocity and distance detection"
        owner "Radar Team" 
        tags "radar", "velocity-detection", "all-weather"
        safetylevel ASIL-D

    def feature PlanningSystem mandatory
      name "Path Planning and Decision System"
      description "Route planning and tactical decision making"
      owner "Planning Team"
      tags "path-planning", "decision-making", "route-optimization"
      safetylevel ASIL-D

      def feature GlobalPlanning mandatory
        name "Global Path Planning"
        description "High-level route planning and navigation"
        owner "Navigation Team"
        tags "global-planning", "navigation", "route-planning"
        safetylevel ASIL-C

      def feature LocalPlanning mandatory
        name "Local Path Planning"
        description "Real-time local path planning and obstacle avoidance"
        owner "Local Planning Team"
        tags "local-planning", "obstacle-avoidance", "real-time"
        safetylevel ASIL-D

    def feature ControlSystem mandatory
      name "Vehicle Control System"
      description "Actuator control for steering, acceleration, and braking"
      owner "Control Systems Team"
      tags "vehicle-control", "actuator-control", "safety-critical"
      safetylevel ASIL-D

      def feature SteeringControl mandatory
        name "Autonomous Steering Control"
        description "Electric power steering control for autonomous operation"
        owner "Steering Team"
        tags "steering-control", "EPS", "autonomous-steering"
        safetylevel ASIL-D

      def feature BrakeControl mandatory
        name "Autonomous Brake Control"
        description "Electronic brake system control for autonomous stopping"
        owner "Brake Team"
        tags "brake-control", "AEB", "autonomous-braking"
        safetylevel ASIL-D

      def feature ThrottleControl mandatory
        name "Autonomous Throttle Control"
        description "Electronic throttle control for autonomous acceleration"
        owner "Powertrain Team"
        tags "throttle-control", "acceleration", "speed-control"
        safetylevel ASIL-C

  def feature SafetyMonitoring mandatory
    name "Safety Monitoring and Fallback Systems"
    description "Comprehensive safety monitoring with fail-safe mechanisms"
    owner "Safety Engineering Team"
    tags "safety", "monitoring", "fail-safe", "redundancy"
    safetylevel ASIL-D

    def feature SystemHealthMonitoring mandatory
      name "System Health Monitoring"
      description "Real-time monitoring of all autonomous system components"
      owner "Health Monitoring Team"
      tags "health-monitoring", "diagnostics", "system-status"
      safetylevel ASIL-D

    def feature FallbackSystem mandatory
      name "Minimal Risk Condition Fallback"
      description "Safe fallback to minimal risk condition on system failure"
      owner "Fallback Systems Team"
      tags "fallback", "minimal-risk", "emergency-stop"
      safetylevel ASIL-D

    def feature RedundantSensors optional
      name "Redundant Sensor Systems"
      description "Backup sensors for critical perception functions"
      owner "Redundancy Team"
      tags "redundancy", "backup-sensors", "fault-tolerance"
      safetylevel ASIL-D

  def feature HumanMachineInterface optional
    name "Human Machine Interface Systems"
    description "Driver interaction and takeover request systems"
    owner "HMI Team"
    tags "HMI", "driver-interaction", "takeover-request"
    safetylevel ASIL-B

    def feature TakeoverRequest or
      name "Takeover Request System"
      description "Alert driver to resume manual control"
      owner "HMI Safety Team"
      tags "takeover", "driver-alert", "manual-fallback"
      safetylevel ASIL-B

    def feature StatusDisplay or
      name "Autonomous System Status Display"
      description "Visual indication of autonomous system status"
      owner "Display Team"
      tags "status-display", "visual-feedback", "system-status"
      safetylevel ASIL-A

    def feature VoiceInterface or
      name "Voice Command Interface"
      description "Voice commands for autonomous system interaction"
      owner "Voice Interface Team"
      tags "voice-interface", "speech-recognition", "hands-free"
      safetylevel QM

## .vml FILES (Variant Model)
# Rule: ONE hdef variantset, NO def statements, ONLY extends ref feature statements
vml_example: |
use featureset AutonomousVehicleFeatures

hdef variantset AutonomousVehicleVariants
  name "Autonomous Vehicle Configuration Variants"
  description "Configuration variants for autonomous vehicle product family targeting different market segments and regulatory requirements"
  owner "Product Line Engineering"
  tags "variants", "configuration", "market-segments", "L3-automation"

  extends ref feature CoreAutonomousFeatures mandatory selected
    extends ref feature PerceptionSystem mandatory selected
      extends ref feature CameraSystem mandatory selected
      extends ref feature LidarSystem optional selected
      extends ref feature RadarSystem mandatory selected
    extends ref feature PlanningSystem mandatory selected  
      extends ref feature GlobalPlanning mandatory selected
      extends ref feature LocalPlanning mandatory selected
    extends ref feature ControlSystem mandatory selected
      extends ref feature SteeringControl mandatory selected
      extends ref feature BrakeControl mandatory selected
      extends ref feature ThrottleControl mandatory selected
  extends ref feature SafetyMonitoring mandatory selected
    extends ref feature SystemHealthMonitoring mandatory selected
    extends ref feature FallbackSystem mandatory selected
    extends ref feature RedundantSensors optional selected
  extends ref feature HumanMachineInterface optional selected
    extends ref feature TakeoverRequest or selected
    extends ref feature StatusDisplay or
    extends ref feature VoiceInterface or

## .vcf FILES (Variant Configuration)
# Rule: ONE hdef configset, MULTIPLE def config statements
vcf_example: |
use featureset AutonomousVehicleFeatures
use variantset AutonomousVehicleVariants

hdef configset AutonomousVehicleConfig
  name "Autonomous Vehicle Premium Configuration"
  description "Auto-generated configuration for premium autonomous vehicle variant with full sensor suite"
  owner "Product Engineering"
  generatedfrom ref variantset AutonomousVehicleVariants
  generatedat "2025-08-18T17:30:45.123Z"
  tags "variant", "config", "auto-generated", "premium"

  def config c_CoreAutonomousFeatures 1
    basedon ref feature CoreAutonomousFeatures
  def config c_PerceptionSystem 1
    basedon ref feature PerceptionSystem
  def config c_CameraSystem 1
    basedon ref feature CameraSystem
  def config c_LidarSystem 1
    basedon ref feature LidarSystem
  def config c_RadarSystem 1
    basedon ref feature RadarSystem
  def config c_PlanningSystem 1
    basedon ref feature PlanningSystem
  def config c_GlobalPlanning 1
    basedon ref feature GlobalPlanning
  def config c_LocalPlanning 1
    basedon ref feature LocalPlanning
  def config c_ControlSystem 1
    basedon ref feature ControlSystem
  def config c_SteeringControl 1
    basedon ref feature SteeringControl
  def config c_BrakeControl 1
    basedon ref feature BrakeControl
  def config c_ThrottleControl 1
    basedon ref feature ThrottleControl
  def config c_SafetyMonitoring 1
    basedon ref feature SafetyMonitoring
  def config c_SystemHealthMonitoring 1
    basedon ref feature SystemHealthMonitoring
  def config c_FallbackSystem 1
    basedon ref feature FallbackSystem
  def config c_RedundantSensors 1
    basedon ref feature RedundantSensors
  def config c_HumanMachineInterface 1
    basedon ref feature HumanMachineInterface
  def config c_TakeoverRequest 1
    basedon ref feature TakeoverRequest
  def config c_StatusDisplay 0
    basedon ref feature StatusDisplay
  def config c_VoiceInterface 0
    basedon ref feature VoiceInterface

## .fun FILES (Function Definition)  
# Rule: ONE hdef functionset, MULTIPLE def function, can use configs
fun_example: |
use featureset AutonomousVehicleFeatures
use configset AutonomousVehicleConfig

hdef functionset AutonomousPerceptionFunctions
  name "Autonomous Vehicle Perception Functions"
  description "Core perception functions for environmental awareness and object detection in autonomous vehicles"
  owner "Perception Systems Team"
  tags "functions", "perception", "sensor-fusion", "object-detection"
  safetylevel ASIL-D

  def function CameraImageProcessing
    name "Camera Image Processing Function"
    description "Real-time processing of stereo and mono camera feeds for object detection and lane recognition"
    owner "Computer Vision Team"
    tags "camera-processing", "object-detection", "lane-recognition", "real-time"
    enables ref feature CameraSystem
    safetylevel ASIL-D
    when ref config c_CoreAutonomousFeatures_PerceptionSystem_CameraSystem

  def function LidarPointCloudProcessing
    name "LiDAR Point Cloud Processing Function"
    description "3D point cloud processing for precise distance measurement and 3D object mapping"
    owner "LiDAR Processing Team"
    tags "lidar-processing", "3d-mapping", "distance-measurement", "point-cloud"
    enables ref feature LidarSystem
    safetylevel ASIL-C
    when ref config c_CoreAutonomousFeatures_PerceptionSystem_LidarSystem

  def function RadarSignalProcessing
    name "Radar Signal Processing Function"
    description "Multi-range radar signal processing for velocity detection and all-weather operation"
    owner "Radar Processing Team"
    tags "radar-processing", "velocity-detection", "all-weather", "doppler"
    enables ref feature RadarSystem
    safetylevel ASIL-D
    when ref config c_CoreAutonomousFeatures_PerceptionSystem_RadarSystem

  def function SensorFusion
    name "Multi-Sensor Fusion Function"
    description "Fusion of camera, LiDAR, and radar data for comprehensive environmental model"
    owner "Sensor Fusion Team"
    tags "sensor-fusion", "data-fusion", "environmental-model", "kalman-filter"
    enables ref feature PerceptionSystem
    safetylevel ASIL-D

  def function ObjectClassification
    name "Object Classification Function"
    description "Machine learning-based classification of detected objects (vehicles, pedestrians, signs)"
    owner "AI/ML Team"
    tags "object-classification", "machine-learning", "AI", "neural-networks"
    enables ref feature PerceptionSystem
    safetylevel ASIL-D

  def function TrackingAndPrediction
    name "Object Tracking and Prediction Function"
    description "Multi-object tracking with motion prediction for dynamic environment understanding"
    owner "Tracking Team"
    tags "object-tracking", "motion-prediction", "kalman-tracking", "trajectory"
    enables ref feature PerceptionSystem
    safetylevel ASIL-D

## .blk FILES (Block Definition) - REDESIGNED v2.18.38
# Rule: ONE hdef block, MULTIPLE def operation/signal, can use configs  
blk_example: |
use configset AutonomousVehicleConfig
use featureset AutonomousVehicleFeatures
use functionset PerceptionProcessingFunctions

hdef block AdvancedPerceptionControlModule
  name "Advanced Perception Control Module"
  description """
    Comprehensive perception processing unit for Level 4 autonomous vehicle environmental awareness.
    Handles multi-sensor data fusion, object detection, tracking, prediction, and environmental model generation.
    Integrates camera, LiDAR, radar, and ultrasonic sensors with AI-based processing algorithms.
    Provides real-time environmental understanding for autonomous driving decision-making systems.
    """
  designrationale """
    Centralized perception architecture enables optimal sensor fusion and reduces computational redundancy.
    Hardware-software co-design approach ensures deterministic real-time performance for safety-critical operations.
    Modular processing pipeline allows independent validation and certification of perception algorithms.
    Redundant sensor processing paths provide fault tolerance and graceful degradation capabilities.
    AI acceleration hardware integration enables advanced deep learning inference for object recognition.
    """
  comment """
    This module represents the core perception system for autonomous vehicles, implementing
    ISO 26262 ASIL-D requirements for functional safety. The design follows automotive
    SPICE guidelines and supports OTA updates for algorithm improvements.
    """
  owner "Advanced Perception Engineering Team"
  level module
  safetylevel ASIL-D
  tags "perception", "sensor-fusion", "AI-processing", "safety-critical", "real-time", "automotive"
  
  // Input interfaces (required by this block) - MOVED TO TOP
  needs ref operation CameraRawData, LidarPointCloud, RadarTargets, UltrasonicData
  needs ref operation CalibrationParameters, SystemConfiguration, DiagnosticCommands
  needs ref operation VehicleDynamicsData, NavigationContext, WeatherConditions
  needs ref signal SystemClockSignal, PowerSupplyStatus, TemperatureSensor
  needs ref signal CalibrationStatus, SystemHeartbeat, SafetyMonitorSignal
  needs ref signal GPSTimeSync, VehicleSpeedSignal, SteeringAngleSignal

  // Block relationships and dependencies
  composedof ref block CameraProcessingSubmodule, LidarProcessingSubmodule, RadarProcessingSubmodule
  composedof ref block FusionProcessingSubmodule, AIInferenceSubmodule, SafetyMonitorSubmodule
  enables ref feature PerceptionSystem, ObjectDetection, PathPrediction
  enables ref feature EnvironmentalMapping, HazardDetection
  when ref config c_CoreAutonomousFeatures_PerceptionSystem_L4

  // operation interfaces (outputs from this block)
  def operation EnvironmentalModel
    name "Comprehensive Environmental Model"
    description """
      Complete 360-degree environmental model containing all detected objects, free space,
      lane markings, traffic signs, and dynamic hazards with confidence levels and timestamps.
      """
    designrationale """
      Unified environmental representation enables consistent decision-making across all
      autonomous driving functions and provides standardized interface for planning systems.
      """
    owner "Perception Data Architecture Team"
    datatype EnvironmentalModelStruct
    tags "environmental-model", "object-detection", "real-time"
    when ref config c_CoreAutonomousFeatures_PerceptionSystem_L4
    
  def operation ObjectTrackingData
    name "Multi-Object Tracking Results"
    description """
      Tracked objects with unique IDs, position history, velocity vectors, acceleration,
      classification confidence, and predicted trajectories for next 5 seconds.
      """
    designrationale """
      Persistent object tracking enables prediction of future states and supports
      advanced path planning algorithms for safe autonomous navigation.
      """
    owner "Object Tracking Team"
    datatype ObjectTrackingStruct
    tags "object-tracking", "trajectory-prediction", "multi-target"
    when ref config c_CoreAutonomousFeatures_ObjectTracking
    
  def operation HazardDetection
    name "Safety-Critical Hazard Alerts"
    description """
      Immediate hazard detection results including collision risks, emergency vehicles,
      construction zones, and other safety-critical environmental conditions.
      """
    designrationale """
      Dedicated hazard detection ensures rapid response to safety-critical situations
      and supports emergency braking and collision avoidance systems.
      """
    owner "Safety Systems Team"
    datatype HazardDetectionStruct
    safetylevel ASIL-D
    tags "hazard-detection", "safety-critical", "emergency-response"
    when ref config c_CoreAutonomousFeatures_HazardDetection
    
  def operation DiagnosticStatus
    name "Perception System Diagnostics"
    description """
      Comprehensive diagnostic information including sensor health, processing performance,
      algorithm confidence levels, and system status for maintenance and debugging.
      """
    owner "Diagnostic Systems Team"
    datatype PerceptionDiagnosticStruct
    tags "diagnostics", "system-health", "maintenance"

  // Signal interfaces (outputs from this block)
  def signal ProcessingHeartbeat
    name "Processing Cycle Heartbeat"
    description """
      High-frequency heartbeat signal indicating successful completion of each
      perception processing cycle with timing information.
      """
    designrationale """
      Heartbeat monitoring enables real-time detection of processing delays
      and supports system health monitoring for safety compliance.
      """
    owner "Real-time Systems Team"
    datatype uint32
    tags "heartbeat", "real-time", "monitoring"
    
  def signal SystemLoadMetrics
    name "Computational Load Metrics"
    description """
      Real-time CPU, GPU, and memory utilization metrics for performance monitoring
      and dynamic resource allocation optimization.
      """
    owner "Performance Engineering Team"
    datatype SystemLoadStruct
    tags "performance", "resource-monitoring", "optimization"
    
  def signal SensorHealthStatus
    name "Multi-Sensor Health Monitoring"
    description """
      Aggregated health status of all perception sensors including calibration drift,
      signal quality, and fault detection results.
      """
    designrationale """
      Continuous sensor health monitoring enables predictive maintenance
      and ensures reliable perception system operation.
      """
    owner "Sensor Integration Team"
    datatype SensorHealthEnum
    safetylevel ASIL-D
    tags "sensor-health", "fault-detection", "maintenance"
    
  def signal EmergencyAlert
    name "Emergency Situation Alert"
    description """
      Critical alert signal for immediate emergency situations requiring
      instant response from safety systems.
      """
    owner "Emergency Response Team"
    datatype EmergencyAlertEnum
    safetylevel ASIL-D
    tags "emergency", "safety-critical", "immediate-response"

## .req FILES (Requirement Definition)
# Rule: ONE hdef requirementset, MULTIPLE def requirement (hierarchical)
req_example: |
use functionset AutonomousPerceptionFunctions
use configset AutonomousVehicleConfig

hdef requirementset AutonomousPerceptionRequirements
  name "Autonomous Vehicle Perception System Requirements"
  description "Comprehensive safety and functional requirements for perception system with ASIL-D compliance and ISO 26262 conformance"
  owner "Perception Safety Engineering Team"
  tags "safety-requirements", "ASIL-D", "ISO-26262", "perception-system"
  safetylevel ASIL-D

  def requirement REQ_PERC_001
    name "Environmental Detection Performance"
    description """
      WHEN the perception system is active THE system SHALL detect stationary objects ≥20cm 
      at distances up to 200m with ≥99.9% accuracy under all operational conditions including 
      varying lighting, weather, and traffic scenarios.
      """
    rationale """
      Ensures reliable object detection for collision avoidance in autonomous driving.
      Critical for ASIL-D compliance and passenger safety in Level 3 autonomous operation.
      Must handle all weather conditions and lighting scenarios per ISO 26262 requirements.
      """
    verificationcriteria """
      Statistical testing with calibrated test objects at various distances and lighting conditions.
      Minimum 10,000 test cases across different environmental scenarios.
      Performance validation in controlled test environment and real-world conditions.
      """
    status approved
    reqtype functional
    owner "Object Detection Team"
    safetylevel ASIL-D
    implements ref function ObjectClassification

    def requirement REQ_PERC_001_1
      name "Object Classification Accuracy"
      description "THE system SHALL classify detected objects (vehicle, pedestrian, cyclist, static) with ≥95% accuracy within 100ms"
      rationale "Accurate classification enables appropriate collision avoidance responses"
      verificationcriteria "ML model validation with annotated test datasets covering all object classes"
      status approved
      reqtype functional
      owner "AI/ML Validation Team"
      safetylevel ASIL-D
      refinedfrom ref requirement REQ_PERC_001
      implements ref function ObjectClassification

    def requirement REQ_PERC_001_2
      name "Detection Range Weather Independence"
      description "THE system SHALL maintain ≥95% detection performance in rain (≤10mm/h) and fog (visibility ≥50m)"
      rationale "All-weather operation critical for autonomous vehicle safety"
      verificationcriteria "Environmental chamber testing with controlled weather simulation"
      status approved
      reqtype functional
      owner "Environmental Testing Team"
      safetylevel ASIL-D
      refinedfrom ref requirement REQ_PERC_001
      implements ref function RadarSignalProcessing

  def requirement REQ_PERC_002
    name "Sensor Fusion Latency"
    description "WHEN multi-sensor data is available THE fusion algorithm SHALL output environmental model within 50ms of latest sensor data"
    rationale "Low latency critical for real-time autonomous vehicle control"
    verificationcriteria "Real-time system testing with synchronized sensor inputs and timing measurement"
    status approved
    reqtype performance
    owner "Real-time Systems Team"
    safetylevel ASIL-D
    implements ref function SensorFusion

  def requirement REQ_PERC_003
    name "Sensor Redundancy and Fallback"
    description "WHEN any single sensor fails THE system SHALL continue operation with degraded but safe performance using remaining sensors"
    rationale "Single point of failure elimination for safety-critical perception"
    verificationcriteria "Fault injection testing with systematic sensor failure simulation"
    status approved
    reqtype safety
    owner "Fault Tolerance Team"
    safetylevel ASIL-D
    implements ref function SensorFusion
    when ref config c_SafetyMonitoring_RedundantSensors

## .tst FILES (Test Definition)
# Rule: ONE hdef testset, MULTIPLE def test/procedure
tst_example: |
use requirementset AutonomousPerceptionRequirements
use functionset AutonomousPerceptionFunctions

hdef testset PerceptionSystemValidationTests
  name "Autonomous Perception System Validation Test Suite"
  description "Comprehensive validation tests for perception system covering functional, safety, and performance requirements with HIL and VIL testing"
  owner "Perception Test Engineering Team"
  tags "validation", "perception-test", "safety-testing", "autonomous-vehicle"

  def testcase TEST_PERC_001_OBJECT_DETECTION
    name "Environmental Object Detection Performance Test"
    description "Validate object detection accuracy and range performance across various environmental conditions"
    satisfies ref requirement REQ_PERC_001
    method HIL
    testlevel system
    setup """
      Autonomous vehicle perception system in HIL test bench with radar/camera/LiDAR simulators, 
      calibrated test objects, and environmental chamber with controlled lighting and weather simulation.
      Test bench configured with precision timing measurement and data logging capabilities.
      """
    steps """
      Initialize perception system and verify all sensors active
      Place calibrated test objects at distances 20m, 50m, 100m, 150m, 200m
      Execute detection algorithm across all sensor modalities
      Verify object detection at each distance with position accuracy ±10cm
      Record detection rates and classification confidence scores
      Repeat tests in simulated rain (5mm/h, 10mm/h) and fog conditions
      Document all failure modes and edge cases encountered
      Generate comprehensive test report with statistical analysis
      """
    expected """
      Objects detected with ≥99.9% accuracy at all test distances
      Classification confidence ≥95% for all object types
      Consistent performance across all environmental conditions
      No false positives or missed detections in safety-critical scenarios
      """
    passcriteria """
      Detection accuracy meets specification in ≥98% of test cases across all environmental conditions.
      Zero tolerance for safety-critical failures (missed pedestrians, vehicles).
      Performance degradation <5% in adverse weather conditions.
      """
    safetylevel ASIL-D
    testresult notrun
    owner "Object Detection Test Team"

  def testcase TEST_PERC_001_1_CLASSIFICATION_ACCURACY
    name "Object Classification Accuracy Validation"
    description "Validate machine learning model classification performance with comprehensive object dataset"
    satisfies ref requirement REQ_PERC_001_1
    method VIL
    setup "Perception ML model in virtual environment with annotated object dataset (10,000+ objects across all classes)"
    steps "Load pre-trained classification model
           Execute classification on test dataset covering vehicles, pedestrians, cyclists, static objects
           Measure classification accuracy per object class
           Verify processing time ≤100ms per classification
           Generate confusion matrix and performance metrics"
    expected "Classification accuracy ≥95% per object class, processing time ≤100ms"
    passcriteria "Accuracy specification met for all object classes with consistent processing performance"
    safetylevel ASIL-D
    testresult notrun
    owner "AI/ML Validation Team"

  def testcase TEST_PERC_002_FUSION_LATENCY
    name "Sensor Fusion Latency Performance Test"
    description "Validate sensor fusion algorithm latency and real-time performance"
    satisfies ref requirement REQ_PERC_002
    method HIL
    setup "Real-time HIL system with synchronized camera/LiDAR/radar inputs and precision timing measurement"
    steps "Configure synchronized sensor data streams at 20Hz
           Inject simultaneous sensor data packets with timestamps
           Execute sensor fusion algorithm
           Measure fusion processing latency from input to output
           Validate environmental model completeness and accuracy
           Repeat test across various traffic scenarios"
    expected "Fusion output available within 50ms of latest sensor input"
    passcriteria "Latency requirement met in ≥99% of fusion cycles across all test scenarios"
    safetylevel ASIL-D
    testresult notrun
    owner "Real-time Performance Team"

  def testcase TEST_PERC_003_SENSOR_REDUNDANCY
    name "Sensor Failure Redundancy Test"
    description "Validate system operation and safety during single sensor failures"
    satisfies ref requirement REQ_PERC_003
    method HIL
    setup "Complete perception system with fault injection capabilities for systematic sensor failure simulation"
    steps "Initialize all sensors and verify normal operation
           Inject camera failure and verify radar/LiDAR compensation
           Inject LiDAR failure and verify camera/radar compensation  
           Inject radar failure and verify camera/LiDAR compensation
           Measure detection performance degradation in each failure mode
           Verify system continues safe operation with remaining sensors"
    expected "System maintains operation with ≥85% detection performance during single sensor failure"
    passcriteria "Safe operation maintained with acceptable performance degradation in all single failure modes"
    safetylevel ASIL-D
    testresult notrun
    owner "Fault Tolerance Test Team"

## .seq FILES (Sequence Diagram) - REDESIGNED v2.18.38
# Rule: ONE hdef sequenceset, MULTIPLE def sequence with from/to/flow
seq_example: |
use block PerceptionControlModule
use block PlanningControlModule
use block VehicleControlModule
use operation EnvironmentModelUpdate
use operation PathPlanningRequest
use signal EmergencyStopSignal

hdef sequenceset AutonomousEmergencyBraking
  name "Autonomous Emergency Braking Sequence"
  description "operation flow sequence for autonomous emergency braking scenario detection and response"
  owner "Safety Systems Integration Team"
  safetylevel ASIL-D
  tags "emergency-braking", "sequence", "safety-critical", "AEB"
  
  // Main emergency braking sequence
  def sequence SEQ_001
    from ref block PerceptionControlModule
    to ref block PlanningControlModule
    flow ref operation EnvironmentModelUpdate
    
  def sequence SEQ_002
    from ref block PlanningControlModule
    to ref block VehicleControlModule
    flow ref operation PathPlanningRequest
    
  def sequence SEQ_003
    from ref block VehicleControlModule
    to ref block BrakeControlModule
    flow ref signal EmergencyStopSignal
    
  def sequence SEQ_004
    from ref block BrakeControlModule
    to ref block PerceptionControlModule
    flow ref signal BrakeEngagementConfirmation
    
  // Error handling fragment
  def fragment CommunicationFailure
    fragmenttype alt
    condition "Communication timeout > 100ms"
    
    def sequence SEQ_005
      from ref block VehicleControlModule
      to ref block FallbackControlModule
      flow ref signal SystemFailureAlert
      
  // Parallel status reporting fragment  
  def fragment StatusReporting
    fragmenttype parallel
    condition "All modules must report status concurrently"
    
    def sequence SEQ_006
      from ref block PerceptionControlModule
      to ref block SystemHealthMonitor
      flow ref signal PerceptionSystemStatus
      
    def sequence SEQ_007
      from ref block PlanningControlModule
      to ref block SystemHealthMonitor
      flow ref signal PlanningSystemStatus
      
  when ref config c_SafetyMonitoring_FallbackSystem

## .ucd FILES (Use Case Diagram) - NEW SYNTAX v2.21.44
# Rule: ONE hdef usecase, MULTIPLE def actor/usecase with from/to/connection structure
# NEW: Clean flat syntax - actors defined first, then usecases with from/to relationships
# VALIDATION RULES:
#   - Primary actors (actortype primary) must be in 'from' position
#   - Secondary actors (actortype secondary) must be in 'to' position  
#   - Functions can be in both 'from' and 'to' positions
#   - 'connection includes' can only be between functions
#   - 'connection associated' can be between actors and functions
ucd_example: |
use functionset ChairSystemFunctions

hdef usecase ChairSystemUseCases
  name "Height Adjustable Chair Use Cases"
  description "Use case model describing interactions between users and the height adjustable chair system covering all major functionalities from adjustment to maintenance with proper actor relationships"
  owner "Systems Engineering Team"
  tags "use-cases", "chair-system", "user-interactions", "pneumatic-electric"

  def actor ChairUser
    name "Chair User"
    description "Primary user of the chair who interacts with adjustment and comfort features for daily use"
    owner "User Experience Team"
    tags "primary-user", "chair-operation", "comfort-adjustment"
    actortype primary

  def actor MaintenanceTechnician
    name "Maintenance Technician"
    description "Technical specialist responsible for chair maintenance, diagnostics, and system resets"
    owner "Maintenance Team"
    tags "maintenance", "diagnostics", "system-reset", "technical-support"
    actortype primary

  def actor SafetyInspector
    name "Safety Inspector"
    description "Safety professional who validates chair safety systems and compliance"
    owner "Safety Team"
    tags "safety-validation", "compliance", "inspection", "quality-assurance"
    actortype primary

  def actor SystemAdministrator
    name "System Administrator"
    description "Administrator responsible for chair system configuration and management"
    owner "Systems Administration Team"
    tags "system-config", "administration", "management"
    actortype secondary

  def actor ChairControlSystem
    name "Chair Control System"
    description "Electronic control system that manages chair functions and safety monitoring"
    owner "Control Systems Team"
    tags "control-system", "automation", "safety-monitoring"
    actortype secondary

  def usecase UC_001
    name "Initiate Chair System"
    description "User initiates chair system operation and initialization"
    from ref actor ChairUser
    to ref function InitializeChairSystem
    connection associated

  def usecase UC_002
    name "Execute Pneumatic Height Adjustment"
    description "User performs height adjustment using pneumatic system"
    from ref actor ChairUser
    to ref function ExecutePneumaticHeightAdjustment
    connection associated

  def usecase UC_003
    name "Monitor Pneumatic Pressure"
    description "System monitors gas cylinder pressure during adjustment"
    from ref function ExecutePneumaticHeightAdjustment
    to ref function MonitorGasCylinderPressure
    connection includes

  def usecase UC_004
    name "Process Pneumatic Control Input"
    description "System processes user input for pneumatic control"
    from ref function ExecutePneumaticHeightAdjustment
    to ref function ProcessPneumaticControlInput
    connection includes

  def usecase UC_005
    name "Execute Electric Height Adjustment"
    description "User performs height adjustment using electric system"
    from ref actor ChairUser
    to ref function ExecuteElectricHeightAdjustment
    connection associated

  def usecase UC_006
    name "Control Electric Motor Speed"
    description "System controls motor speed during electric adjustment"
    from ref function ExecuteElectricHeightAdjustment
    to ref function ControlElectricMotorSpeed
    connection includes

  def usecase UC_007
    name "Manage Memory Positions"
    description "User manages saved position presets for electric system"
    from ref actor ChairUser
    to ref function ManageMemoryPositions
    connection associated

  def usecase UC_008
    name "Adjust Lumbar Support"
    description "User adjusts lumbar support for ergonomic comfort"
    from ref actor ChairUser
    to ref function AdjustLumbarSupport
    connection associated

  def usecase UC_009
    name "Process Lumbar Input"
    description "System processes lumbar adjustment input"
    from ref function AdjustLumbarSupport
    to ref function ProcessLumbarInput
    connection includes

  def usecase UC_010
    name "Control Armrest Height"
    description "User adjusts armrest height for optimal positioning"
    from ref actor ChairUser
    to ref function ControlArmrestHeight
    connection associated

  def usecase UC_011
    name "Control Armrest Width"
    description "User adjusts armrest width for comfort"
    from ref actor ChairUser
    to ref function ControlArmrestWidth
    connection associated

  def usecase UC_012
    name "Manage Tilt Mechanism"
    description "User controls seat tilt functionality"
    from ref actor ChairUser
    to ref function ManageTiltMechanism
    connection associated

  def usecase UC_013
    name "Adjust Tilt Tension"
    description "User adjusts tilt tension for preferred resistance"
    from ref function ManageTiltMechanism
    to ref function AdjustTiltTension
    connection includes

  def usecase UC_014
    name "Engage Tilt Lock"
    description "User locks tilt position at desired angle"
    from ref function ManageTiltMechanism
    to ref function EngageTiltLock
    connection includes

  def usecase UC_015
    name "Monitor Stability System"
    description "System continuously monitors chair stability"
    from ref function MonitorStabilitySystem
    to ref actor ChairControlSystem
    connection associated

  def usecase UC_016
    name "Detect Pressure Faults"
    description "System detects pneumatic pressure anomalies"
    from ref function DetectPressureFaults
    to ref actor ChairControlSystem
    connection associated

  def usecase UC_017
    name "Perform Safety Diagnostics"
    description "Technician executes comprehensive safety system diagnostics"
    from ref actor MaintenanceTechnician
    to ref function PerformSafetyDiagnostics
    connection associated

  def usecase UC_018
    name "Execute Factory Reset"
    description "Technician resets chair to factory default settings"
    from ref actor MaintenanceTechnician
    to ref function ExecuteFactoryReset
    connection associated

  def usecase UC_019
    name "Manage Maintenance Schedule"
    description "Technician manages preventive maintenance scheduling"
    from ref actor MaintenanceTechnician
    to ref function ManageMaintenanceSchedule
    connection associated

  def usecase UC_020
    name "Select Material Options"
    description "User or administrator configures material preferences"
    from ref function SelectMaterialOptions
    to ref actor SystemAdministrator
    connection associated

  def usecase UC_021
    name "Customize Color Scheme"
    description "User personalizes chair color and aesthetic options"
    from ref actor ChairUser
    to ref function CustomizeColorScheme
    connection associated

  def usecase UC_022
    name "Validate Safety Systems"
    description "Safety inspector validates chair safety compliance"
    from ref actor SafetyInspector
    to ref function PerformSafetyDiagnostics
    connection associated

  def usecase UC_023
    name "Monitor Weight Capacity"
    description "System monitors user weight within safe operating limits"
    from ref function MonitorWeightCapacity
    to ref actor ChairControlSystem
    connection associated

  def usecase UC_024
    name "Synchronize System Components"
    description "System coordinates all chair subsystems"
    from ref function SynchronizeSystemComponents
    to ref actor ChairControlSystem
    connection associated



## .flr FILES (Failure Analysis for FMEA)
# Rule: ONE hdef failureset, MULTIPLE def failuremode with comprehensive FMEA analysis
# SUPPORTS DUAL SYNTAX: Both hierarchical (old) and flat (new) patterns
# OLD: def failuremode > def cause/effect (nested structure)
# NEW: def failuremode with causes/effects/detectedby/mitigatedby relations (flat structure)
flr_example: |
// PowerSupplyFailures.flr - Complete FMEA Example with Temporal Logic
use blockset AutomotiveECUBlocks
use functionset PowerSupplyFunctions
use requirementset SafetyRequirements
use testset PowerSupplyTests

hdef failureset PowerSupplyFailures
  name "Power Supply Subsystem FMEA"
  description """
    Comprehensive failure mode and effects analysis for automotive ECU power supply.
    Covers voltage regulation, power distribution, and fault detection mechanisms.
    """
  owner "Safety Engineering Team"
  tags "fmea", "power-supply", "safety-critical", "automotive"
  level subsystem
  safetylevel ASIL-D
  timingreference ms
  propagateto ref failureset VehicleSystemFailures
  block ref block PowerSupplyBlock

  def failuremode VoltageRegulatorFailure
    name "Voltage Regulator Complete Failure"
    description """
      Primary voltage regulator stops providing regulated 5V power output.
      Results in immediate loss of ECU functionality and potential system shutdown.
      """
    owner "Hardware Safety Team"
    tags "voltage-regulation", "hardware-failure", "critical"
    
    // FMEA Quantitative Analysis
    failurerate 1.2e-6        // 1.2 failures per million hours
    severity 9                // High severity - system shutdown
    detectability 3           // Good detection capability
    occurrence 4              // Moderate occurrence likelihood
    actionpriority high       // High priority for action
    safetylevel ASIL-D
    
    // Temporal Properties (using timingreference from failureset level)
    faultdetectiontime 5      // Detected within 5 milliseconds
    faulttolerancetime 2      // System can tolerate for 2ms
    propagationdelay 10       // Propagates to system failure in 10ms
    recoverytime 500          // 500ms required for recovery
    
    // Failure Causality Chain with Timing (causes can only ref failuremode - MULTIPLE allowed)
    causes ref failuremode TransistorBurnout within 50
    causes ref failuremode CapacitorDegradation within 200
    causes ref failuremode ThermalOverload within 100
    
    // Failure Effects with Timing (effects can only ref failuremode - MULTIPLE allowed)
    effects ref failuremode ProcessorPowerLoss within 10
    effects ref failuremode SystemShutdown within 500
    effects ref failuremode DataCorruption within 2
    
    // Detection Mechanisms with Response Time (detectedby can only ref function - MULTIPLE allowed)
    detectedby ref function VoltageSensorMonitoring within 5
    detectedby ref function PowerSupplyDiagnostic within 20
    detectedby ref function SystemHealthMonitor within 15
    
    // Mitigation Strategies with Activation Time (mitigatedby can only ref function - MULTIPLE allowed)
    mitigatedby ref function RedundantPowerPath within 2
    mitigatedby ref function PowerFailureSafeMode within 100
    mitigatedby ref function EmergencyShutdownSequence within 50
    
    // Testing and Requirements Traceability (testedby/derivedfrom - SINGLE only)
    testedby ref testcase VoltageRegulatorFailureTest
    derivedfrom ref requirement VoltageRegulationReq

  def failuremode TransistorBurnout
    name "Power Transistor Thermal Burnout"
    description """
      Power MOSFET failure due to excessive thermal stress.
      Leads to open circuit condition and loss of power regulation.
      """
    owner "Hardware Design Team"
    tags "thermal-failure", "component-failure", "mosfet"
    
    failurerate 0.8e-6
    severity 7                // High severity but not catastrophic
    detectability 5           // Moderate detection capability
    occurrence 2              // Low occurrence likelihood
    actionpriority medium
    safetylevel ASIL-C
    
    // Temporal Properties (using timingreference from failureset level)
    faultdetectiontime 10
    propagationdelay 50
    recoverytime 1000
    
    // This is a root cause (no causes listed)
    effects ref failuremode VoltageRegulatorFailure within 50
    
    // Detection and Mitigation (detectedby/mitigatedby can only ref function)
    detectedby ref function TemperatureSensorMonitoring within 10
    detectedby ref function CurrentSenseMonitoring within 5
    
    mitigatedby ref function ThermalDerating within 1
    mitigatedby ref function OvertemperatureProtection within 5
    mitigatedby ref function LoadShedding within 20
    
    // Testing and Requirements (testedby ref testcase, derivedfrom ref requirement)
    testedby ref testcase ThermalStressTest
    testedby ref testcase OvertemperatureProtectionTest
    derivedfrom ref requirement ThermalManagementReq
    derivedfrom ref requirement ComponentReliabilityReq

  def failuremode SystemShutdown
    name "Complete System Power Down"
    description """
      Total loss of system functionality due to power supply failure.
      Results in loss of all safety-critical functions.
      """
    owner "System Safety Team"
    tags "system-failure", "safety-critical", "shutdown"
    
    failurerate 0.5e-6
    severity 10               // Maximum severity - safety critical
    detectability 1           // Always detected (obvious)
    occurrence 1              // Very rare occurrence
    actionpriority high
    safetylevel ASIL-D
    
    // Temporal Properties (using timingreference from failureset level)
    faultdetectiontime 1      // Immediately obvious
    recoverytime 5000         // Long recovery time
    
    // Caused by power failures (causes can only ref failuremode)
    causes ref failuremode VoltageRegulatorFailure within 500
    causes ref failuremode PowerDistributionFailure within 100
    
    // System-level effects (effects can only ref failuremode)
    effects ref failuremode VehicleSafetyCompromise within 1000
    
    // Detection and Mitigation (detectedby/mitigatedby can only ref function)
    detectedby ref function SystemWatchdog within 1
    detectedby ref function PowerMonitoring within 2
    
    mitigatedby ref function EmergencyPowerBackup within 10
    mitigatedby ref function SafeStateTransition within 100
    
    // Testing and Requirements (testedby ref testcase, derivedfrom ref requirement)
    testedby ref testcase SystemShutdownTest
    testedby ref testcase EmergencyBackupTest
    derivedfrom ref requirement SystemAvailabilityReq
    derivedfrom ref requirement EmergencyResponseReq

  // Configuration-based failure mode (only visible if feature enabled)
  def failuremode RedundantSupplyFailure
    name "Redundant Power Supply Failure"
    description "Failure of backup power supply system"
    when ref config c_RedundantPowerSupply
    
    severity 8
    detectability 4
    occurrence 3
    actionpriority high
    
    // Reference constraints: causes/effects ref failuremode, detectedby/mitigatedby ref function
    causes ref failuremode BackupRegulatorFailure within 100
    effects ref failuremode SystemDegradedMode within 200
    
    detectedby ref function RedundancyMonitoring within 50
    mitigatedby ref function LoadBalancing within 10

## .itm FILES (Item Definition - ISO 26262)
# Rule: ONE hdef itemdefinition, MULTIPLE def boundary/operatingmode
itm_example: |
use featureset AutonomousVehicleFeatures

hdef itemdefinition AutonomousVehicleItem
  name "Autonomous Vehicle L3 System Item"
  description "Complete item definition for Level 3 autonomous vehicle system per ISO 26262"
  owner "Functional Safety Manager"
  tags "ISO-26262", "item-definition", "L3-autonomous", "safety-critical"
  iso26262part "Part 3 - Item Definition"
  safetylevel ASIL-D

  def boundary SystemBoundary
    name "Autonomous Vehicle System Boundary"
    description "Physical and functional boundaries of the autonomous vehicle item"
    
    includes ref block PerceptionControlModule
    includes ref block PlanningControlModule
    includes ref block VehicleControlModule
    includes ref block HumanMachineInterface
    excludes ref block InfotainmentSystem
    excludes ref block ClimateControlSystem
    
    def boundary SensorBoundary
      name "Sensor System Boundary"
      description "Boundary definition for all perception sensors"
      includes ref block CameraSystem
      includes ref block LidarSystem
      includes ref block RadarSystem
      
  def operatingmode HighwayAutonomous
    name "Highway Autonomous Operation"
    description "Autonomous operation on controlled access highways"
    conditions "Highway driving, speeds 60-130 km/h, good weather"
    safetylevel ASIL-D
    
    def operatingmode HighwayEntry
      name "Highway Entry and Merging"
      description "Autonomous highway entry and merging maneuvers"
      conditions "Highway on-ramps, merging zones, acceleration lanes"
      safetylevel ASIL-D
      
    def operatingmode HighwayExit
      name "Highway Exit and Lane Change"
      description "Autonomous highway exit and lane changing"
      conditions "Highway off-ramps, lane changes, deceleration zones"
      safetylevel ASIL-D

  def operatingmode UrbanAutonomous
    name "Urban Autonomous Operation"
    description "Limited autonomous operation in urban environments"
    conditions "City streets, speeds 30-60 km/h, traffic lights, pedestrians"
    safetylevel ASIL-C
    
  def operatingmode ManualFallback
    name "Manual Control Fallback"
    description "Driver takeover and manual control operation"
    conditions "System failure, adverse weather, construction zones"
    safetylevel QM

  itemscope ref function AutonomousPerceptionFunctions
  itemscope ref feature CoreAutonomousFeatures

## .haz FILES (Hazard Analysis - ISO 26262)
# Rule: ONE hdef hazardanalysis, MULTIPLE def hazard/situation with ASIL assessment
haz_example: |
use itemdefinition AutonomousVehicleItem

hdef hazardanalysis AutonomousVehicleHazards
  name "Autonomous Vehicle Hazard Analysis"
  description "Complete hazard analysis and risk assessment for Level 3 autonomous vehicle system per ISO 26262 Part 3"
  owner "Functional Safety Team"
  tags "ISO-26262", "hazard-analysis", "ASIL-assessment", "risk-analysis"
  iso26262part "Part 3 - Hazard Analysis"
  assessmentdate "2025-08-18"
  safetylevel ASIL-D

  def hazard UnintendedAcceleration
    name "Unintended Vehicle Acceleration"
    description """
      Vehicle accelerates without driver command or against driver intention during autonomous operation.
      This hazard can occur due to throttle control system malfunction, sensor misinterpretation,
      or software algorithm errors in the autonomous driving system.
      Represents a critical safety risk requiring immediate mitigation and driver takeover capability.
      """
    hazardclass "Longitudinal Motion"
    severity S3
    exposure E4
    controllability C2
    asil ASIL-D
    
    malfunctionof ref function ThrottleControl
    affects ref feature ControlSystem
    leadsto ref requirement REQ_SAFE_ACCEL_001

    def situation HighwayUnintendedAcceleration
      name "Unintended Acceleration on Highway"
      description "Vehicle accelerates unintentionally during highway autonomous operation"
      speed "60-130 km/h"
      environment "Highway, dry conditions"
      trafficdensity "Medium to high traffic"
      maxacceptabledelay "500ms"
      nominalresponsetime "200ms"
      severity S3
      exposure E4
      controllability C2
      asil ASIL-D

    def situation UrbanUnintendedAcceleration
      name "Unintended Acceleration in Urban Area"
      description "Vehicle accelerates unintentionally in urban environment with pedestrians"
      speed "30-60 km/h"
      environment "Urban streets, intersections"
      trafficdensity "High traffic, pedestrians present"
      maxacceptabledelay "300ms"
      nominalresponsetime "150ms"
      severity S3
      exposure E5
      controllability C3
      asil ASIL-D

  def hazard LossOfLateralControl
    name "Loss of Lateral Vehicle Control"
    description "Vehicle loses ability to maintain lane position or steer appropriately"
    hazardclass "Lateral Motion"
    severity S3
    exposure E4
    controllability C2
    asil ASIL-D
    
    malfunctionof ref function SteeringControl
    affects ref feature ControlSystem
    leadsto ref requirement REQ_SAFE_STEER_001

    def situation HighwayLaneDeviation
      name "Lane Deviation on Highway"
      description "Vehicle deviates from lane during highway autonomous operation"
      speed "60-130 km/h"
      environment "Highway, multiple lanes"
      trafficdensity "High traffic density"
      maxacceptabledelay "400ms"
      nominalresponsetime "100ms"
      severity S3
      exposure E4
      controllability C2
      asil ASIL-D

  def hazard FailureToStopAtObstacle
    name "Failure to Stop at Obstacle"
    description "Vehicle fails to detect obstacle and stop, resulting in collision"
    hazardclass "Longitudinal Motion"
    severity S3
    exposure E4
    controllability C3
    asil ASIL-D
    
    malfunctionof ref function ObjectClassification
    affects ref feature PerceptionSystem
    leadsto ref requirement REQ_SAFE_STOP_001

## .sam FILES (Safety Mechanisms - ISO 26262)
# Rule: ONE hdef safetymechanismset, MULTIPLE def safetymechanism
sam_example: |
use hazardanalysis AutonomousVehicleHazards
use itemdefinition AutonomousVehicleItem

hdef safetymechanismset AutonomousVehicleSafetyMechanisms
  name "Autonomous Vehicle Safety Mechanisms"
  description "Comprehensive safety mechanisms for autonomous vehicle system per ISO 26262 Part 4"
  owner "Safety Mechanisms Team"
  tags "ISO-26262", "safety-mechanisms", "fault-tolerance", "fail-safe"
  iso26262part "Part 4 - Safety Mechanisms"
  safetylevel ASIL-D

  def safetymechanism RedundantSensorValidation
    name "Redundant Sensor Cross-Validation"
    description "Continuous cross-validation of perception sensors to detect sensor failures"
    mechanismtype "Detection"
    safetylevel ASIL-D
    safetymechanismeffectiveness "99.5%"
    detectiontime "50ms"
    reactiontime "100ms"
    
    satisfies ref requirement REQ_SAFE_SENSOR_001
    mitigates ref hazard FailureToStopAtObstacle
    allocatedto ref block PerceptionControlModule
    implementedby ref function SensorFusion
    detects ref failuremode CameraSystemFailure
    verifiedby ref testcase TEST_PERC_003_SENSOR_REDUNDANCY

  def safetymechanism EmergencyBrakingOverride
    name "Emergency Braking Override System"
    description "Independent emergency braking system that can override autonomous control"
    mechanismtype "Control"
    safetylevel ASIL-D
    safetymechanismeffectiveness "99.9%"
    detectiontime "20ms"
    reactiontime "80ms"
    
    satisfies ref requirement REQ_SAFE_BRAKE_001
    mitigates ref hazard UnintendedAcceleration
    allocatedto ref block VehicleControlModule
    implementedby ref function EmergencyBrakeActivation
    detects ref failuremode ThrottleSystemFailure
    verifiedby ref testcase TEST_BRAKE_OVERRIDE_001

  def safetymechanism SteeringAnglePlausibilityCheck
    name "Steering Angle Plausibility Monitoring"
    description "Continuous monitoring of steering commands for plausibility and range limits"
    mechanismtype "Detection"
    safetylevel ASIL-D
    safetymechanismeffectiveness "98.7%"
    detectiontime "10ms"
    reactiontime "50ms"
    
    satisfies ref requirement REQ_SAFE_STEER_002
    mitigates ref hazard LossOfLateralControl
    allocatedto ref block VehicleControlModule
    implementedby ref function SteeringPlausibilityCheck
    detects ref failuremode SteeringSystemFailure
    verifiedby ref testcase TEST_STEER_PLAUSIBILITY_001

  def safetymechanism DriverTakeoverRequest
    name "Driver Takeover Request System"
    description "Alert system to request driver takeover when autonomous system reaches limits"
    mechanismtype "Mitigation"
    safetylevel ASIL-B
    safetymechanismeffectiveness "95.0%"
    detectiontime "100ms"
    reactiontime "3000ms"
    
    satisfies ref requirement REQ_SAFE_TAKEOVER_001
    mitigates ref hazard LossOfLateralControl
    allocatedto ref block HumanMachineInterface
    implementedby ref function TakeoverRequest
    verifiedby ref testcase TEST_TAKEOVER_REQUEST_001

## .fta FILES (Fault Tree Analysis) - NEW v2.18.38
# Rule: ONE hdef faulttree, MULTIPLE def gate with hierarchical structure
fta_example: |
use failureset PerceptionSystemFailures
use hazardanalysis AutonomousVehicleHazards
use safetymechanismset AutonomousVehicleSafetyMechanisms

hdef faulttree VehicleCollisionFaultTree
  name "Vehicle Collision Fault Tree Analysis"
  description "Complete FTA for vehicle collision scenarios in autonomous operation per ISO 26262"
  owner "Safety Analysis Team"
  safetylevel ASIL-D
  tags "fault-tree", "collision-analysis", "quantitative-fta", "safety-critical"
  
  // Top event - what we're analyzing
  topevent ref failuremode VehicleCollisionEvent
  
  // System level gate structure
  def gate systemfailure
    gatetype or
    
    // These reference top events from block-level FTA files
    input ref failuremode PerceptionSystemCompleteFail      // From PerceptionModule.fta
    input ref failuremode PlanningSystemCompleteFail        // From PlanningModule.fta  
    input ref failuremode ControlSystemCompleteFail         // From ControlModule.fta
    input ref failuremode HumanFactorError                  // From HumanFactors.fta
    
    output ref failuremode VehicleCollisionEvent

// Block-level FTA - separate conceptual file
hdef faulttree PerceptionModuleFaultTree
  name "Perception Module Fault Tree"
  description "Detailed fault tree for perception system failures"
  owner "Perception Safety Team"
  allocatedto ref block PerceptionControlModule
  safetylevel ASIL-D
  
  // This is what the system level references
  topevent ref failuremode PerceptionSystemCompleteFail
  
  def gate perceptionfailure
    gatetype or
    
    input ref gate sensorfailures
    input ref gate processingfailures
    input ref gate communicationfailures
    
    output ref failuremode PerceptionSystemCompleteFail

  def gate sensorfailures
    gatetype and  // All sensors must fail (redundancy)
    
    input ref failuremode CameraSystemFailure       // Basic events from .flr
    input ref failuremode LidarSystemFailure
    input ref failuremode RadarSystemFailure
    
    output ref gate perceptionfailure

  def gate processingfailures
    gatetype or   // Any processing failure causes perception failure
    
    input ref failuremode SensorFusionFailure
    input ref failuremode ObjectClassificationFailure
    input ref failuremode TrackingAlgorithmFailure
    
    output ref gate perceptionfailure

  def gate communicationfailures
    gatetype xor  // Exclusive failure modes
    
    input ref failuremode CANBusFailure
    input ref failuremode EthernetFailure
    
    output ref gate perceptionfailure

## .smd FILES (State Machine Diagram) - NEW v2.21.63
# Rule: ONE hdef statemachine, MULTIPLE def state/transition, ONE initialstate=true, ONE endstate=true per file
smd_example: |
use functionset EPBFunctions
use requirementset EPBRequirements
use block EPBControlModule
use block EPBMotorModule
use block EPBSensorModule

hdef statemachine ElectricParkingBrakeStateMachine
  name "Electric Parking Brake State Machine"
  description """
    Complete state machine controlling EPB engagement, release, and fault handling operations 
    with full safety compliance per ISO 26262 ASIL-D requirements.
    """
  owner "Safety Systems Team"
  tags "epb", "state-machine", "safety-critical", "iso26262"
  safetylevel ASIL-D
  status approved
  allocatedto ref block EPBControlModule
  implements ref requirement EPB_StateMachineReq_001

  def state Idle
    name "Idle State"
    description "EPB system in idle state, ready to receive commands, monitoring for faults"
    owner "Control Systems Team"
    tags "idle", "monitoring", "ready"
    status implemented
    initialstate true
    implements ref requirement EPB_IdleStateReq_001
    when ref config c_EPB_IdleMonitoring

  def state Engaging
    name "Engaging State"
    description "EPB system actively engaging the brake mechanism with motor control"
    owner "Actuator Team"
    tags "engaging", "motor-active", "transitioning"
    status implemented
    implements ref requirement EPB_EngagementReq_002
    when ref config c_EPB_EngagementControl

  def state Engaged
    name "Engaged State"
    description "EPB system fully engaged and holding vehicle with continuous monitoring"
    owner "Safety Team"
    tags "engaged", "holding", "monitoring"
    status implemented
    implements ref requirement EPB_HoldingReq_003
    
  def state Releasing
    name "Releasing State"
    description "EPB system actively releasing the brake mechanism"
    owner "Actuator Team"
    tags "releasing", "motor-active", "transitioning"
    status implemented
    implements ref requirement EPB_ReleaseReq_004
    when ref config c_EPB_ReleaseControl

  def state Fault
    name "Fault State"
    description "EPB system in fault condition requiring diagnostic attention and recovery"
    owner "Diagnostics Team"
    tags "fault", "diagnostic", "recovery"
    status implemented
    endstate true
    implements ref requirement EPB_FaultHandlingReq_005
    when ref config c_EPB_FaultHandling

  def state Maintenance
    name "Maintenance State"
    description "EPB system in maintenance mode for calibration and testing"
    owner "Service Team"
    tags "maintenance", "calibration", "service"
    status review
    implements ref requirement EPB_MaintenanceReq_006
    when ref config c_EPB_MaintenanceMode

  def transition EngageCommand
    name "Engage Command Transition"
    description "Transition from idle to engaging when valid engage command received with safety checks"
    owner "Control Logic Team"
    tags "engage", "command", "safety-check"
    status implemented
    from ref state Idle
    to ref state Engaging
    condition "engage_command_received AND brake_pedal_pressed AND vehicle_stationary AND system_healthy"
    call ref function InitiateEngagement
    implements ref requirement EPB_EngageTransitionReq_007
    when ref config c_EPB_ManualEngagement

  def transition EngagementComplete
    name "Engagement Complete Transition"
    description "Transition from engaging to engaged when motor reaches target position"
    owner "Actuator Team"
    tags "engagement-complete", "position-feedback"
    status implemented
    from ref state Engaging
    to ref state Engaged
    condition "engagement_confirmed AND motor_current_stable AND position_sensor_engaged AND torque_threshold_reached"
    call ref function ConfirmEngagement
    implements ref requirement EPB_EngagementConfirmReq_008

  def transition ReleaseCommand
    name "Release Command Transition"
    description "Transition from engaged to releasing when valid release command received"
    owner "Control Logic Team"
    tags "release", "command", "validation"
    status implemented
    from ref state Engaged
    to ref state Releasing
    condition "release_command_received AND (brake_pedal_pressed OR ignition_on OR gear_not_park)"
    call ref function InitiateRelease
    implements ref requirement EPB_ReleaseTransitionReq_009
    when ref config c_EPB_ManualRelease

  def transition ReleaseComplete
    name "Release Complete Transition"
    description "Transition from releasing to idle when motor reaches released position"
    owner "Actuator Team"
    tags "release-complete", "position-feedback"
    status implemented
    from ref state Releasing
    to ref state Idle
    condition "release_confirmed AND motor_current_zero AND position_sensor_released AND no_residual_torque"
    call ref function ConfirmRelease
    implements ref requirement EPB_ReleaseConfirmReq_010

  def transition FaultDetected
    name "Fault Detection Transition"
    description "Transition to fault state when system diagnostic failure detected"
    owner "Diagnostics Team"
    tags "fault-detection", "diagnostic", "safety"
    status implemented
    from ref state Idle
    to ref state Fault
    condition "system_diagnostic_failure OR motor_overcurrent OR sensor_fault OR communication_timeout"
    call ref function HandleFault
    implements ref requirement EPB_FaultDetectionReq_011
    when ref config c_EPB_DiagnosticMonitoring

  def transition FaultFromEngaging
    name "Fault From Engaging Transition"
    description "Emergency transition to fault state during engagement process"
    owner "Safety Team"
    tags "emergency-fault", "engagement-failure"
    status implemented
    from ref state Engaging
    to ref state Fault
    condition "engagement_failure OR motor_jam OR excessive_current OR timeout_exceeded"
    call ref function EmergencyFaultHandler
    implements ref requirement EPB_EmergencyFaultReq_012

  def transition FaultFromReleasing
    name "Fault From Releasing Transition"
    description "Emergency transition to fault state during release process"
    owner "Safety Team"
    tags "emergency-fault", "release-failure"
    status implemented
    from ref state Releasing
    to ref state Fault
    condition "release_failure OR motor_jam OR sensor_disconnect OR safety_violation"
    call ref function EmergencyFaultHandler
    implements ref requirement EPB_EmergencyFaultReq_013

  def transition FaultRecovery
    name "Fault Recovery Transition"
    description "Transition from fault state back to idle after successful recovery"
    owner "Diagnostics Team"
    tags "fault-recovery", "system-restore"
    status implemented
    from ref state Fault
    to ref state Idle
    condition "fault_cleared AND system_diagnostic_passed AND manual_reset_confirmed AND calibration_verified"
    call ref function ClearFault
    implements ref requirement EPB_FaultRecoveryReq_014

  def transition MaintenanceEntry
    name "Maintenance Entry Transition"
    description "Transition to maintenance mode for service operations"
    owner "Service Team"
    tags "maintenance-entry", "service-mode"
    status review
    from ref state Idle
    to ref state Maintenance
    condition "maintenance_mode_requested AND service_tool_connected AND vehicle_secured"
    call ref function EnterMaintenanceMode
    implements ref requirement EPB_MaintenanceModeReq_015
    when ref config c_EPB_ServiceMode

  def transition MaintenanceExit
    name "Maintenance Exit Transition"
    description "Transition from maintenance mode back to normal operation"
    owner "Service Team"
    tags "maintenance-exit", "normal-operation"
    status review
    from ref state Maintenance
    to ref state Idle
    condition "maintenance_complete AND calibration_successful AND service_tool_disconnected"
    call ref function ExitMaintenanceMode
    implements ref requirement EPB_MaintenanceExitReq_016
    when ref config c_EPB_ServiceMode

## .spr FILES (Sprint/Project Planning)
# Rule: ONE hdef sprint, MULTIPLE def epic/story/task (hierarchical), agent references
spr_example: |
use agentset AutonomousVehicleAgents

hdef sprint AutonomousVehicleDevelopmentSprint
  name "Autonomous Vehicle L3 System Development Sprint"
  description "Complete autonomous vehicle system design, implementation, and validation sprint"
  owner "Autonomous Systems Program Manager"
  startdate "2025-09-01"
  enddate "2025-12-15"
  comment """
    This sprint covers the complete development lifecycle for L3 autonomous vehicle system.
    Key focus areas include perception system architecture, safety validation, and ISO 26262 compliance.
    Critical path items: perception requirements → sensor fusion → safety analysis → validation testing.
    """

  def epic PerceptionSystemDevelopment
    name "Perception System Architecture and Implementation"
    description "Design and implement complete perception system with sensor fusion and object detection"
    assignedto ref agent PerceptionSystemsAgent
    issuestatus open
    priority critical
    comment """
      Epic focuses on core perception capabilities for autonomous vehicle.
      Includes requirements definition, sensor fusion implementation, and safety validation.
      Dependencies: Hardware platform selection, sensor calibration procedures.
      """

    def story PerceptionRequirements
      name "Perception System Requirements Definition"
      description "Define comprehensive requirements for perception system including performance, safety, and functional specifications"
      assignedto ref agent SafetyRequirementsAgent
      issuestatus open
      priority critical

      def task PerceptionFunctionalRequirements
        name "Perception Functional Requirements"
        description "Define functional requirements for object detection, classification, and tracking performance"
        assignedto ref agent PerceptionSystemsAgent
        issuestatus open
        priority critical
        points "13"
        outputfile "requirements/PerceptionFunctionalRequirements.req"

      def task PerceptionSafetyRequirements
        name "Perception Safety Requirements"
        description "Define ASIL-D safety requirements for perception system including redundancy and fail-safe mechanisms"
        assignedto ref agent SafetyRequirementsAgent
        issuestatus backlog
        priority critical
        points "21"
        outputfile "requirements/PerceptionSafetyRequirements.req"

    def story SensorFusionImplementation
      name "Multi-Sensor Fusion Algorithm Implementation"
      description "Implement real-time sensor fusion algorithm combining camera, LiDAR, and radar data"
      assignedto ref agent PerceptionSystemsAgent
      issuestatus backlog
      priority high

      def task FusionAlgorithmDesign
        name "Sensor Fusion Algorithm Design"
        description "Design Kalman filter-based sensor fusion algorithm for multi-modal perception data"
        assignedto ref agent PerceptionSystemsAgent
        issuestatus backlog
        priority high
        points "8"
        outputfile "functions/SensorFusionFunctions.fun"

      def task FusionImplementation
        name "Sensor Fusion Implementation"
        description "Implement sensor fusion algorithm in C++ with real-time performance optimization"
        assignedto ref agent PerceptionSystemsAgent
        issuestatus backlog
        priority high
        points "13"
        outputfile "blocks/PerceptionControlModule.blk"

  def epic SafetyValidation
    name "Safety Analysis and Validation"
    description "Complete safety analysis including FMEA, FTA, and ISO 26262 compliance validation"
    assignedto ref agent FunctionalSafetyAgent
    issuestatus backlog
    priority critical

    def story HazardAnalysis
      name "Hazard Analysis and Risk Assessment"
      description "Conduct comprehensive hazard analysis with ASIL determination per ISO 26262"
      assignedto ref agent FunctionalSafetyAgent
      issuestatus backlog
      priority critical
      
      def task HazardIdentification
        name "System Hazard Identification"
        description "Identify all potential hazards for autonomous vehicle system operation"
        assignedto ref agent FunctionalSafetyAgent
        issuestatus backlog
        priority critical
        points "5"
        outputfile "safety/AutonomousVehicleHazards.haz"

    def story FaultTreeAnalysis
      name "Fault Tree Analysis"
      description "Develop quantitative fault tree analysis for critical failure scenarios"
      assignedto ref agent FunctionalSafetyAgent
      issuestatus backlog
      priority high
      
      def task CollisionFaultTree
        name "Vehicle Collision Fault Tree"
        description "Create detailed fault tree for vehicle collision scenarios with quantitative analysis"
        assignedto ref agent FunctionalSafetyAgent
        issuestatus backlog
        priority high
        points "8"
        outputfile "safety/VehicleCollisionFaultTree.fta"

## .agt FILES (Agent Definition)
# Rule: ONE hdef agentset, MULTIPLE def agent (with roles and specializations)
agt_example: |
hdef agentset AutonomousVehicleAgents
  name "Autonomous Vehicle Engineering Agents"
  description "Specialized AI agents for autonomous vehicle systems engineering tasks"
  owner "AI Engineering Team"

  def agent PerceptionSystemsAgent
    name "Perception Systems Engineering Agent"
    description """
      Expert in autonomous vehicle perception systems, sensor fusion, and computer vision.
      Specialized in developing safety-critical perception algorithms for Level 3 autonomous vehicles
      with deep knowledge of ISO 26262 compliance and real-time system constraints.
      """
    role "Perception Systems Engineer"
    specialization "Autonomous Vehicle Perception"
    expertise """
      Sensor fusion algorithms including Kalman filtering and particle filters
      Computer vision and deep learning for object detection and classification
      Machine learning model optimization for automotive edge computing
      Real-time processing and deterministic system design
      Multi-modal sensor integration (camera, LiDAR, radar)
      Safety-critical software development per ISO 26262
      """
    context """
      Autonomous vehicles and ADAS systems development
      Multi-sensor perception systems for safety-critical applications
      ASIL-D compliance and functional safety requirements
      Object detection and tracking in dynamic environments
      Environmental perception for highway and urban driving scenarios
      """

  def agent FunctionalSafetyAgent
    name "Functional Safety Engineering Agent"
    description "Specialist in automotive functional safety, ISO 26262, and hazard analysis"
    role "Functional Safety Engineer"
    specialization "Automotive Functional Safety"
    expertise "ISO 26262", "Hazard analysis", "FMEA", "Fault tree analysis", "ASIL assessment"
    context "Automotive safety", "Risk assessment", "Safety mechanisms", "Failure analysis"

  def agent SafetyRequirementsAgent
    name "Safety Requirements Engineering Agent"
    description "Expert in safety-critical requirements engineering and verification"
    role "Safety Requirements Engineer"
    specialization "Safety Requirements Engineering"
    expertise "Safety requirements", "Requirements traceability", "Verification", "Validation"
    context "Safety-critical systems", "ASIL requirements", "Requirements validation"

  def agent TestValidationAgent
    name "Test and Validation Engineering Agent"
    description "Specialist in autonomous vehicle testing, HIL/SIL validation, and test automation"
    role "Test and Validation Engineer"
    specialization "Autonomous Vehicle Testing"
    expertise "HIL testing", "SIL validation", "Test automation", "Performance testing"
    context "Autonomous vehicle validation", "Safety testing", "Real-time systems"

# Multiple def Rules by File Type
def_statement_rules:
  .ple: "NO def statements - only hdef productline with properties"
  .fml: "MULTIPLE def feature allowed - hierarchical features with constraints"
  .vml: "AUTO-GENERATED - Do not create manually, use right-click command on .fml"
  .vcf: "AUTO-GENERATED - Do not create manually, use right-click command on .vml"
  .blk: "MULTIPLE def operation/signal allowed - output interface definitions. Use 'needs ref operation/signal' for inputs"
  .fun: "MULTIPLE def function allowed - behavioral specifications"
  .req: "MULTIPLE def requirement allowed - hierarchical requirements with traceability"
  .tst: "MULTIPLE def test allowed - validation test cases and procedures"
  .spr: "MULTIPLE def epic/story/task allowed - hierarchical project planning"
  .agt: "MULTIPLE def agent allowed - specialized AI agents"
  .ucd: "MULTIPLE def actor/usecase allowed - use case diagrams with actor interactions"
  .seq: "MULTIPLE def sequence/fragment allowed - operation flow sequences between blocks"
  .flr: "MULTIPLE def failuremode/cause/effect allowed - supports both hierarchical (old) and flat (new) FMEA syntax patterns. Multiplicity: causes/effects/detectedby/mitigatedby allow multiple entries, testedby/derivedfrom allow single entry only"
  .itm: "MULTIPLE def boundary/operatingmode allowed - ISO 26262 item definition"
  .haz: "MULTIPLE def hazard/situation allowed - ISO 26262 hazard analysis with ASIL"
  .sam: "MULTIPLE def safetymechanism allowed - ISO 26262 safety mechanisms"
  .fta: "MULTIPLE def gate allowed - fault tree analysis with hierarchical gates"

# Multiline Description Support
multiline_descriptions: "ALL extensions support multiline descriptions using triple quotes (\"\"\"...\"\"\")"

# Core Language Rules - ACTUAL SYLANG SYNTAX
core_syntax:
  header_definition: "hdef <type> <identifier>"  # Only ONE per file
  symbol_definition: "def <type> <identifier> [optional_flags]"  # Multiple allowed except .ple/.vml
  property_statement: "<property> <value>"  # Properties indented under parent
  relation_statement: "<relation> ref <target> <identifier>"  # Cross-file references
  conditional_visibility: "when ref config <config_identifier>"  # Config-based graying
  import_statement: "use <type> <identifier>"  # Import external symbols
  
indentation_rules:
  - Use 2 spaces or tab per indentation level
  - Parent-child relationships through indentation
  - Properties and relations indented under their parent symbols

# Multiline String Support - NEW v2.18.42
multiline_strings:
  syntax: "Use \"\"\" \"\"\" (triple quotes) for multiline string values"
  supported_properties:
    common_multiline: "description, comment, rationale, verificationcriteria"
    test_specific: "steps, setup, expected, passcriteria"
    requirement_specific: "rationale, verificationcriteria"
    safety_specific: "description (for hazards), conditions (for operating modes)"
    sprint_specific: "comment (for epics, stories, tasks, sprints)"
    agent_specific: "expertise, context"
    block_specific: "designrationale"
  
  examples:
    basic_multiline: |
      description """
        This is a comprehensive description that spans
        multiple lines with proper formatting and
        indentation preserved.
        """
    
    sprint_comment: |
      comment """
        Epic focuses on core perception capabilities for autonomous vehicle.
        Includes requirements definition, sensor fusion implementation, and safety validation.
        Dependencies: Hardware platform selection, sensor calibration procedures.
        """
    
    test_steps: |
      steps """
        Initialize perception system and verify all sensors active
        Place calibrated test objects at distances 20m, 50m, 100m, 150m, 200m
        Execute detection algorithm across all sensor modalities
        Verify object detection at each distance with position accuracy ±10cm
        Record detection rates and classification confidence scores
        """
    
    requirement_rationale: |
      rationale """
        Ensures reliable object detection for collision avoidance in autonomous driving.
        Critical for ASIL-D compliance and passenger safety.
        Must handle all weather conditions and lighting scenarios.
        """
  
  advantages:
    - "Cleaner syntax than \\ continuation"
    - "Preserves formatting and indentation"
    - "More readable for long descriptions"
    - "Standard across all 17 file extensions"
    - "Proper syntax highlighting support"

# Valid Keywords by File Type - COMPLETE v2.18.38
valid_keywords:
  .ple: ["hdef", "productline", "name", "description", "owner", "domain", "compliance", "firstrelease", "tags", "safetylevel", "region"]
  .fml: ["use", "hdef", "featureset", "listedfor", "def", "feature", "name", "description", "owner", "tags", "safetylevel", "requires", "excludes", "mandatory", "optional", "or", "alternative"]
  .vml: ["AUTO-GENERATED - use command: Generate VML from FML"]
  .vcf: ["AUTO-GENERATED - use command: Generate VCF from VML"]
  .fun: ["use", "hdef", "functionset", "def", "function", "name", "description", "owner", "tags", "level", "safetylevel", "enables", "decomposedto", "allocatedto", "when", "ref", "config"]
  .blk: ["use", "hdef", "block", "def", "characteristic", "operation", "signal", "name", "description", "designrationale", "owner", "tags", "level", "safetylevel", "chartype", "specification", "tolerance", "controlmethod", "measuringequipment", "direction", "datatype", "composedof", "enables", "needs", "when", "ref", "config"]
  .req: ["use", "hdef", "requirementset", "def", "requirement", "name", "description", "owner", "tags", "level", "rationale", "verificationcriteria", "status", "reqtype", "safetylevel", "refinedfrom", "derivedfrom", "implements", "allocatedto", "when", "ref", "config"]
  .tst: ["use", "hdef", "testset", "def", "testcase", "name", "description", "owner", "tags", "level", "safetylevel", "setup", "passcriteria", "testresult", "expected", "method", "testlevel", "steps", "satisfies", "derivedfrom", "refinedfrom", "when", "ref", "config"]
  .spr: ["use", "hdef", "sprint", "def", "epic", "story", "task", "name", "description", "owner", "startdate", "enddate", "issuestatus", "priority", "assignedto", "points", "outputfile", "comment"]
  .agt: ["use", "hdef", "agentset", "def", "agent", "name", "description", "owner", "role", "specialization", "expertise", "context"]
  .ucd: ["use", "hdef", "usecase", "def", "actor", "usecase", "name", "description", "owner", "tags", "level", "actortype", "from", "to", "connection", "associated", "includes", "when", "ref"]
  .seq: ["use", "hdef", "sequenceset", "def", "sequence", "fragment", "name", "description", "owner", "tags", "level", "safetylevel", "from", "to", "flow", "fragmenttype", "condition", "when", "ref"]
  .flr: ["use", "hdef", "failureset", "def", "failuremode", "cause", "effect", "name", "description", "owner", "tags", "level", "safetylevel", "propagateto", "block", "timingreference", "failurerate", "severity", "detectability", "occurrence", "actionpriority", "allocatedto", "affects", "probability", "rpn", "faultdetectiontime", "faulttolerancetime", "propagationdelay", "recoverytime", "causes", "effects", "detectedby", "mitigatedby", "testedby", "derivedfrom", "within", "when", "ref"]
  .itm: ["use", "hdef", "itemdefinition", "def", "boundary", "operatingmode", "name", "description", "owner", "tags", "level", "iso26262part", "safetylevel", "conditions", "includes", "excludes", "itemscope", "when", "ref"]
  .haz: ["use", "hdef", "hazardanalysis", "def", "hazard", "situation", "name", "description", "owner", "tags", "level", "iso26262part", "assessmentdate", "hazardclass", "severity", "exposure", "controllability", "asil", "speed", "environment", "trafficdensity", "maxacceptabledelay", "nominalresponsetime", "malfunctionof", "affects", "leadsto", "when", "ref"]
  .sam: ["use", "hdef", "safetymechanismset", "def", "safetymechanism", "name", "description", "owner", "tags", "level", "iso26262part", "safetylevel", "mechanismtype", "safetymechanismeffectiveness", "detectiontime", "reactiontime", "satisfies", "mitigates", "allocatedto", "implementedby", "detects", "verifiedby", "when", "ref"]
  .fta: ["use", "hdef", "faulttree", "def", "gate", "name", "description", "owner", "tags", "safetylevel", "topevent", "gatetype", "input", "output", "allocatedto", "when", "ref"]
  .smd: ["use", "hdef", "statemachine", "def", "state", "transition", "name", "description", "owner", "tags", "safetylevel", "status", "allocatedto", "implements", "initialstate", "endstate", "from", "to", "condition", "call", "when", "ref"]

# File-Specific Rules - UPDATED v2.18.38
file_rules:
  .ple: "Root file - no use statements, no def statements, only properties under hdef productline"
  .fml: "Feature hierarchy - uses productline, hierarchical def feature with mandatory/optional/or/alternative flags"
  .vml: "AUTO-GENERATED from .fml - variant selection with extends ref feature statements"
  .vcf: "AUTO-GENERATED from .vml - configuration values with def config statements (0/1 values)"
  .fun: "Function definitions - uses imports, def function, supports when ref config for graying"
  .blk: "Block definitions - uses imports, def operation/signal for interfaces with direction/datatype, block relations (composedof/enables/needs) at hdef level, needs only for operation/signal"
  .req: "Requirements - uses imports, hierarchical def requirement with traceability relations"
  .tst: "Test definitions - uses imports, def testcase with validation relations"
  .spr: "Sprint definitions - uses imports, hierarchical def epic/story/task with agent references"
  .agt: "Agent definitions - uses imports, def agent with roles and specializations"
  .ucd: "Use case definitions - uses imports, def actor/usecase with from/to/connection relationships (NEW SYNTAX v2.21.44)"
  .seq: "Sequence definitions - uses imports, def sequence with from/to ref block and flow ref operation/signal"
  .flr: "Failure analysis - uses imports, supports both hierarchical (def failuremode > def cause/effect) and flat (def failuremode with relations) FMEA patterns"
  .itm: "Item definition - uses imports, def boundary/operatingmode for ISO 26262 item definition"
  .haz: "Hazard analysis - uses imports, def hazard/situation for ISO 26262 hazard analysis with ASIL assessment"
  .sam: "Safety mechanisms - uses imports, def safetymechanism for ISO 26262 safety mechanisms with effectiveness metrics"
  .fta: "Fault tree analysis - uses imports, def gate for hierarchical fault tree analysis with gate types"
  .smd: "State machine definitions - uses imports, def state/transition with from/to relationships, ONE initialstate=true and ONE endstate=true per file, allocatedto at hdef level"

# Enum Values - UPDATED v2.18.38
enum_values:
  safetylevel: ["ASIL-A", "ASIL-B", "ASIL-C", "ASIL-D", "QM", "SIL-1", "SIL-2", "SIL-3", "SIL-4"]
  chartype: ["special", "critical", "significant"]
  level: ["product", "system", "subsystem", "component", "subcomponent", "module", "submodule", "part", "subpart", "external", "customer", "supplier"]
  actionpriority: ["high", "medium", "low"]
  direction: ["input", "output", "bidirectional"]
  status: ["draft", "review", "approved", "deprecated", "implemented"]
  reqtype: ["functional", "non-functional", "system", "software", "hardware", "interface", "safety"]
  testresult: ["pass", "fail", "intest", "notrun", "blocked"]
  method: ["MIL", "SIL", "PIL", "HIL", "VIL", "manual", "automated"]
  testlevel: ["unit", "integration", "system", "acceptance"]
  issuestatus: ["backlog", "open", "inprogress", "blocked", "canceled", "done"]
  priority: ["low", "medium", "high", "critical"]
  actortype: ["primary", "secondary"]
  fragmenttype: ["alt", "else", "parallel", "loop"]
  severity: ["S0", "S1", "S2", "S3"]
  exposure: ["E0", "E1", "E2", "E3", "E4", "E5"]
  controllability: ["C0", "C1", "C2", "C3"]
  asil: ["QM", "ASIL-A", "ASIL-B", "ASIL-C", "ASIL-D"]
  mechanismtype: ["Detection", "Control", "Mitigation"]
  gatetype: ["and", "or", "xor", "inhibit"]

# Cross-File Relationships - COMPLETE v2.18.38
relationship_validation:
  valid_patterns:
    - "listedfor ref productline <identifier>" (in .fml)
    - "generatedfrom ref variantset <identifier>" (in .vcf)
    - "extends ref feature <identifier> [flags]" (in .vml)
    - "requires ref feature <identifier1>, <identifier2>" (in .fml)
    - "excludes ref feature <identifier1>, <identifier2>" (in .fml)
    - "implements ref function <identifier>" (in .req)
    - "allocatedto ref block <identifier>" (in .fun/.req/.flr/.sam/.fta)
    - "satisfies ref requirement <identifier>" (in .tst/.sam)
    - "when ref config <identifier>" (in .fun/.blk/.req/.tst/.ucd/.seq/.flr/.itm/.haz/.sam/.fta)
    - "inherits ref featureset <identifier>" (in .fml)
    - "assignedto ref agent <identifier>" (in .spr)
    - "from ref actor <identifier>" (in .ucd - NEW SYNTAX v2.21.44)
    - "to ref function <identifier>" (in .ucd - NEW SYNTAX v2.21.44)
    - "from ref function <identifier>" (in .ucd - NEW SYNTAX v2.21.44)
    - "to ref actor <identifier>" (in .ucd - NEW SYNTAX v2.21.44)
    - "connection associated" (in .ucd - NEW SYNTAX v2.21.44)
    - "connection includes" (in .ucd - NEW SYNTAX v2.21.44)
    - "from ref block <identifier>" (in .seq)
    - "to ref block <identifier>" (in .seq)
    - "flow ref operation <identifier>" (in .seq)
    - "flow ref signal <identifier>" (in .seq)
    - "needs ref operation <identifier>" (in .blk - only for operation/signal interfaces)
    - "needs ref signal <identifier>" (in .blk - only for operation/signal interfaces)
    - "affects ref function <identifier>" (in .flr)
    - "itemscope ref function <identifier>" (in .itm)
    - "malfunctionof ref function <identifier>" (in .haz)
    - "affects ref feature <identifier>" (in .haz)
    - "leadsto ref requirement <identifier>" (in .haz)
    - "mitigates ref hazard <identifier>" (in .sam)
    - "detects ref failuremode <identifier>" (in .sam)
    - "verifiedby ref testcase <identifier>" (in .sam)
    - "topevent ref failuremode <identifier>" (in .fta)
    - "input ref failuremode <identifier>" (in .fta)
    - "input ref gate <identifier>" (in .fta)
    - "output ref failuremode <identifier>" (in .fta)
    - "output ref gate <identifier>" (in .fta)

# Auto-Generation Commands
auto_generation_commands:
  .vml_from_fml: "Right-click .fml file → 'Generate VML from FML'"
  .vcf_from_vml: "Right-click .vml file → 'Generate VCF from VML'"
  note: "AI should NOT create .vml or .vcf files manually - instruct users to use these commands"

# Config-Based Feature Management  
config_system:
  - Config definitions: "def config <name> <0|1>" (in .vcf files)
  - Symbol visibility: "when ref config <config_name>" (in most file types)
  - Graying behavior: config=0 makes symbols gray and functionally unavailable
  - File restrictions: when ref config NOT allowed in .ple/.fml/.vml/.vcf files

# AI Development Guidelines
ai_instructions:
  file_creation:
    - Always start with appropriate use statements (except .ple)
    - Follow with single hdef statement  
    - Use only valid keywords for each file type
    - Follow indentation hierarchy (2 spaces or tab)
    - Use when ref config appropriately (not in .ple/.fml/.vml/.vcf)
    - Reference valid symbols from imported files
    - For .blk files: use def operation/signal instead of def port
    - For .seq files: use def sequence with from/to ref block and flow ref operation/signal
    - For safety files (.flr/.itm/.haz/.sam/.fta): ensure ISO 26262 compliance
    - Use \"\"\" \"\"\" (triple quotes) for multiline strings instead of \\ continuation
    - Prefer multiline format for description, rationale, steps, setup, comment, expertise, context properties
    - Use multiline strings to provide comprehensive, detailed information rather than brief single-line text
    
  symbol_naming:
    - Use CamelCase for identifiers
    - Descriptive names reflecting purpose
    - Consistent naming across related files
    - Follow c_FeatureName pattern for configs
    
  validation_awareness:
    - .fml sibling consistency rules
    - .vml selection constraint rules  
    - Cross-file symbol resolution
    - Config-based graying behavior
    - ISO 26262 compliance for safety extensions

# ISO 26262 Compliance Guide
iso26262_compliance:
  complete_toolchain: "Extensions .itm, .haz, .sam, .fta provide full ISO 26262 Part 3 & 4 compliance"
  workflow: "Item Definition (.itm) → Hazard Analysis (.haz) → Safety Mechanisms (.sam) → Fault Tree Analysis (.fta)"
  asil_support: "Full ASIL-A through ASIL-D support with QM (Quality Management)"
  traceability: "Complete traceability from hazards through requirements to safety mechanisms"

# Standards Compliance Philosophy - Single Source of Truth
standards_philosophy:
  single_source_of_truth: "Sylang follows SpaceX Musk's 5-step process - eliminate unnecessary complexity and duplication"
  git_based_versioning: "Uses Git for baselines/versions instead of database-based approaches - superior and industry standard"
  automated_compliance: "Compliance reports generated automatically from traced relationships rather than separate documentation"
  ai_integration: "Native AI support through GitHub Copilot and Cursor - no custom AI integration needed"
  
# Standards Coverage Analysis
standards_coverage:
  aspice_automotive_spice:
    SUP_8: "✅ COVERED - Git-based configuration management superior to database approaches"
    SUP_1: "⚠️ DEFERRED - Quality assurance processes (organizational, not technical)"
    SWE_1_6: "✅ COVERED - Software processes handled by 'level software' keyword in existing extensions"
    SYS_2: "✅ COVERED - Bidirectional traceability via refinedfrom/satisfies/implements relations + traceability matrix"
    SYS_3: "✅ COVERED - .blk files handle operation/signal interfaces (more implementation-focused than pure documentation)"
    SYS_4: "❌ GAP - Test planning needs enhancement (addressed with testlevel enum)"
    
  incose_systems_engineering:
    requirements_management: "✅ COVERED - .req files with full traceability"
    architecture_design: "✅ COVERED - .blk files with operation/signal interfaces"
    verification_validation: "✅ COVERED - .tst files with comprehensive test cases"
    configuration_management: "✅ COVERED - .vcf files + Git versioning"
    
  iso26262_functional_safety:
    item_definition: "✅ COVERED - .itm files with complete item boundary definition"
    hazard_analysis: "✅ COVERED - .haz files with ASIL assessment and risk quantification"
    safety_mechanisms: "✅ COVERED - .sam files with effectiveness metrics"
    fault_tree_analysis: "✅ COVERED - .fta files with hierarchical gate structures"
    
  do178_aviation:
    requirements_coverage: "✅ COVERED - Automated from traceability relationships"
    structural_coverage: "✅ COVERED - Can be automated from .blk and .fun relationships"
    test_coverage: "✅ COVERED - .tst files with testlevel enum (unit/integration/system/acceptance)"
    
  medical_standards:
    risk_management: "✅ COVERED - .haz files applicable to medical device risk analysis"
    design_controls: "✅ COVERED - .req/.fun/.blk provide complete design control traceability"
    verification_validation: "✅ COVERED - .tst files with comprehensive validation approach"

# Major Enhancements (v2.21.60 → v2.21.85)
major_enhancements_v2_21_85:
  vcf_validation_system: "Complete VCF validation using 'use variantset' references and symbol manager to prevent unauthorized config additions"
  clean_vcf_syntax: "New clean VCF syntax with 'basedon ref feature' statements replacing hierarchical naming"
  complete_use_statements: "VCF files now include both 'use featureset' and 'use variantset' for full traceability"
  enhanced_ucd_syntax: "Added from/to/connection keywords for cleaner use case relationships (v2.21.44)"
  improved_logging: "License-based logging system with L1/L2/L3 levels and production-grade logging"
  config_graying: "Enhanced config-based graying functionality for all diagram types and DocView"
  internal_block_improvements: "Enhanced Internal Block Diagram with improved connections and layout"
  kanban_board: "Complete Kanban Board implementation for Sprint (.spr) files with real-time updates"

# New Keywords Added (v2.21.60 → v2.21.85)
new_keywords_v2_21_85:
  vcf_keywords:
    basedon: "RELATION - 'basedon ref feature FeatureName' - Links config to source feature with clear traceability"
    feature: "REFERENCE - Used with basedon relation for feature references in VCF files"
    
  ucd_keywords:
    from: "RELATION - Source of use case relationship (v2.21.44)"
    to: "RELATION - Target of use case relationship (v2.21.44)" 
    connection: "RELATION - Connection type (associated, includes) for cleaner syntax (v2.21.44)"
    
  fmea_keywords:
    propagateto: "RELATION - Propagate failure to upper level FMEA"
    level: "ENUM - FMEA hierarchy level (system/subsystem/module/part)"
    failurerate: "PROPERTY - Failure rate (float, FIT)"
    severity: "PROPERTY - Severity rating (1-10)"
    detectability: "PROPERTY - Detectability rating (1-10)"
    occurrence: "PROPERTY - Occurrence rating (1-10)"
    actionpriority: "ENUM - Action priority (low/medium/high/critical)"
    
  fta_keywords:
    topevent: "RELATION - Top event reference to failuremode"
    gatetype: "ENUM - Gate type (AND/OR/XOR/NOT/NAND/NOR)"
    input: "RELATION - Gate input reference"
    output: "RELATION - Gate output reference"

# VCF File Structure Changes (v2.21.85)
vcf_structure_v2_21_85:
  old_syntax: |
    use variantset FeatureVariants
    hdef configset FeatureVariantsConfig
      def config c_Feature_SubFeature_Component 1
  
  new_syntax: |
    use featureset FeatureModel
    use variantset FeatureVariants
    hdef configset FeatureVariantsConfig
      def config c_Feature 1
        basedon ref feature Feature
      def config c_SubFeature 0
        basedon ref feature SubFeature
        
  benefits:
    - "Clear traceability with explicit feature references"
    - "IDE navigation support via 'Go to Reference'"
    - "Simplified config naming without hierarchical complexity"
    - "Complete pipeline visibility (.fml → .vml → .vcf)"
    - "Validation prevents unauthorized config additions"

# Relationship Validation Updates (v2.21.85)
relationship_validation_v2_21_85:
  new_rules:
    basedon: "Can only reference 'feature' - ensures VCF configs link to legitimate features"
    from: "Used in UCD files for cleaner relationship syntax"
    to: "Used in UCD files for cleaner relationship syntax"
    connection: "Used in UCD files to specify relationship type (associated/includes)"
    
  validation_enhancements:
    - "VCF files validated against source .vml file using 'use variantset' references"
    - "Symbol manager integration for efficient cross-file validation"
    - "Prevents manual addition of configs not derived from .fml → .vml → .vcf pipeline"
    - "Enhanced error operations with specific file and line information"

# Recent Enhancements (v2.18.42 → v2.21.60)
recent_enhancements_legacy:
  test_level_enum: "Added testlevel property to .tst files with enum values: unit, integration, system, acceptance"
  sprint_comments: "Added comment property to .spr files for hdef sprint, def epic, def story, def task"
  docview_support: "Added .spr files to docview system for hierarchical sprint planning visualization"
  multiline_strings: "Standardized on \"\"\" \"\"\" (triple quotes) for multiline strings across all 17 syntax files, replacing \\ continuation"
  architecture_analysis: "Comprehensive architecture review completed - identified key improvement areas"
  
# Architecture Improvement Roadmap
architecture_improvements:
  priority_fixes:
    activation_refactor: "Break down 537-line activate() function using dependency injection and lazy loading"
    error_handling: "Implement centralized error handling with consistent async patterns"
    manager_decoupling: "Extract interfaces to reduce tight coupling between core managers"
    performance_optimization: "Add lazy loading for heavy components and optimize file watchers"
    
  design_patterns:
    dependency_injection: "Implement ServiceContainer for better testability and loose coupling"
    interface_segregation: "Extract ISymbolManager, IValidationEngine, IConfigManager interfaces"
    lazy_loading: "Defer initialization of heavy components until needed"
    error_boundaries: "Consistent error handling with proper rollback mechanisms"

last_updated: "2025-09-09T22:37:14.816Z"
generated_by: "Sylang VSCode Extension v2.23.28"
